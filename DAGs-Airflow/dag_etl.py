# -*- coding: utf-8 -*-
"""dag_etl.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-SYALNdrZdm6X_7jDy-UV9h7pVdNbNHm
"""

from airflow import DAG
from airflow.operators.python_operator import PythonOperator
from datetime import datetime
from etl_functions import (
    extrair_dados_yahoo_finance,
    limpeza_dados_yahoo_finance,
    mesclar_dataframes_por_data,
    extrair_dados_meteostat,
    limpeza_e_transformacao,
    mesclar_e_visualizar,
    salvar_no_gcs,
    carregar_dados_do_gcs,
    verificar_informacoes,
    verificar_consistencia,
    analisar_estatisticas,
    verificar_datas,
    visualizar_distribuicao,
    visualizar_temperaturas,
    visualizar_heatmap_mensal,
    visualizar_graficos_linha,
    conectar_postgresql,
    criar_esquema_estrela,
    inserir_dados_esquema_estrela,
    carregar_dados_para_bigquery
)

default_args = {
    'owner': 'airflow',
    'start_date': datetime(2024, 7, 15),
    'retries': 1,
}

dag = DAG(
    'dag_etl',
    default_args=default_args,
    description='ETL DAG',
    schedule_interval='@daily',
)

extrair_yahoo_aed = PythonOperator(
    task_id='extrair_dados_yahoo_aed',
    python_callable=extrair_dados_yahoo_finance,
    op_kwargs={'ticker': 'AED=X', 'start_date': '2014-01-01', 'end_date': '2024-01-01'},
    dag=dag,
)

extrair_yahoo_brl = PythonOperator(
    task_id='extrair_dados_yahoo_brl',
    python_callable=extrair_dados_yahoo_finance,
    op_kwargs={'ticker': 'BRL=X', 'start_date': '2014-01-01', 'end_date': '2024-01-01'},
    dag=dag,
)

limpar_dados_aed = PythonOperator(
    task_id='limpar_dados_aed',
    python_callable=limpeza_dados_yahoo_finance,
    op_kwargs={'df': "{{ task_instance.xcom_pull(task_ids='extrair_dados_yahoo_aed') }}", 'prefixo': 'USD_AED'},
    dag=dag,
)

limpar_dados_brl = PythonOperator(
    task_id='limpar_dados_brl',
    python_callable=limpeza_dados_yahoo_finance,
    op_kwargs={'df': "{{ task_instance.xcom_pull(task_ids='extrair_dados_yahoo_brl') }}", 'prefixo': 'USD_BRL'},
    dag=dag,
)

mesclar_dados = PythonOperator(
    task_id='mesclar_dados',
    python_callable=mesclar_dataframes_por_data,
    op_kwargs={'df1': "{{ task_instance.xcom_pull(task_ids='limpar_dados_aed') }}", 'df2': "{{ task_instance.xcom_pull(task_ids='limpar_dados_brl') }}"},
    dag=dag,
)

extrair_dados_clima = PythonOperator(
    task_id='extrair_dados_clima',
    python_callable=extrair_dados_meteostat,
    op_kwargs={'latitude': 25.276987, 'longitude': 55.296249, 'start_date': '2014-01-01', 'end_date': '2024-01-01'},
    dag=dag,
)

limpar_dados_clima = PythonOperator(
    task_id='limpar_dados_clima',
    python_callable=limpeza_e_transformacao,
    op_kwargs={'df': "{{ task_instance.xcom_pull(task_ids='extrair_dados_clima') }}"},
    dag=dag,
)

mesclar_tudo = PythonOperator(
    task_id='mesclar_tudo',
    python_callable=mesclar_e_visualizar,
    op_kwargs={'df1': "{{ task_instance.xcom_pull(task_ids='mesclar_dados') }}", 'df2': "{{ task_instance.xcom_pull(task_ids='limpar_dados_clima') }}"},
    dag=dag,
)

salvar_gcs = PythonOperator(
    task_id='salvar_gcs',
    python_callable=salvar_no_gcs,
    op_kwargs={'dataframe': "{{ task_instance.xcom_pull(task_ids='mesclar_tudo') }}", 'bucket_name': 'meu_bucket', 'file_name': 'dados_etl.csv'},
    dag=dag,
)

carregar_gcs = PythonOperator(
    task_id='carregar_gcs',
    python_callable=carregar_dados_do_gcs,
    op_kwargs={'bucket_name': 'meu_bucket', 'file_name': 'dados_etl.csv'},
    dag=dag,
)

verificar_info = PythonOperator(
    task_id='verificar_info',
    python_callable=verificar_informacoes,
    op_kwargs={'df': "{{ task_instance.xcom_pull(task_ids='carregar_gcs') }}"},
    dag=dag,
)

verificar_consistencia = PythonOperator(
    task_id='verificar_consistencia',
    python_callable=verificar_consistencia,
    op_kwargs={'df': "{{ task_instance.xcom_pull(task_ids='carregar_gcs') }}"},
    dag=dag,
)

analisar_estatisticas = PythonOperator(
    task_id='analisar_estatisticas',
    python_callable=analisar_estatisticas,
    op_kwargs={'df': "{{ task_instance.xcom_pull(task_ids='carregar_gcs') }}"},
    dag=dag,
)

verificar_datas = PythonOperator(
    task_id='verificar_datas',
    python_callable=verificar_datas,
    op_kwargs={'df': "{{ task_instance.xcom_pull(task_ids='carregar_gcs') }}"},
    dag=dag,
)

visualizar_distribuicao = PythonOperator(
    task_id='visualizar_distribuicao',
    python_callable=visualizar_distribuicao,
    op_kwargs={'df': "{{ task_instance.xcom_pull(task_ids='carregar_gcs') }}"},
    dag=dag,
)

visualizar_temperaturas = PythonOperator(
    task_id='visualizar_temperaturas',
    python_callable=visualizar_temperaturas,
    op_kwargs={'df': "{{ task_instance.xcom_pull(task_ids='carregar_gcs') }}"},
    dag=dag,
)

visualizar_heatmap = PythonOperator(
    task_id='visualizar_heatmap',
    python_callable=visualizar_heatmap_mensal,
    op_kwargs={'df': "{{ task_instance.xcom_pull(task_ids='carregar_gcs') }}"},
    dag=dag,
)

visualizar_graficos_linha = PythonOperator(
    task_id='visualizar_graficos_linha',
    python_callable=visualizar_graficos_linha,
    op_kwargs={'df': "{{ task_instance.xcom_pull(task_ids='carregar_gcs') }}"},
    dag=dag,
)

conectar_postgresql = PythonOperator(
    task_id='conectar_postgresql',
    python_callable=conectar_postgresql,
    dag=dag,
)

criar_esquema_estrela = PythonOperator(
    task_id='criar_esquema_estrela',
    python_callable=criar_esquema_estrela,
    op_kwargs={'conn': "{{ task_instance.xcom_pull(task_ids='conectar_postgresql') }}"},
    dag=dag,
)

inserir_dados_esquema_estrela = PythonOperator(
    task_id='inserir_dados_esquema_estrela',
    python_callable=inserir_dados_esquema_estrela,
    op_kwargs={'conn': "{{ task_instance.xcom_pull(task_ids='conectar_postgresql') }}", 'df': "{{ task_instance.xcom_pull(task_ids='carregar_gcs') }}"},
    dag=dag,
)

carregar_bigquery = PythonOperator(
    task_id='carregar_bigquery',
    python_callable=carregar_dados_para_bigquery,
    op_kwargs={'dataframe': "{{ task_instance.xcom_pull(task_ids='carregar_gcs') }}", 'dataset_name': 'Dados_transformados_analise', 'table_name': 'fato_temperatura_moeda'},
    dag=dag,
)

extrair_yahoo_aed >> extrair_yahoo_brl >> limpar_dados_aed >> limpar_dados_brl >> mesclar_dados >> extrair_dados_clima >> limpar_dados_clima >> mesclar_tudo >> salvar_gcs >> carregar_gcs
carregar_gcs >> verificar_info
carregar_gcs >> verificar_consistencia
carregar_gcs >> analisar_estatisticas
carregar_gcs >> verificar_datas
carregar_gcs >> visualizar_distribuicao
carregar_gcs >> visualizar_temperaturas
carregar_gcs >> visualizar_heatmap
carregar_gcs >> visualizar_graficos_linha
carregar_gcs >> conectar_postgresql >> criar_esquema_estrela >> inserir_dados_esquema_estrela
carregar_gcs >> carregar_bigquery
``` &#8203;:citation[oaicite:0]{index=0}&#8203;