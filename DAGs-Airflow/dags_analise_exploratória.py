# -*- coding: utf-8 -*-
"""DAGs-Analise-exploratória.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BsvPbgz7P5F4XuU_Uny_maMwH4sh3X9e

DAG para Análise Exploratória de Dados

Esta DAG é responsável por realizar a análise exploratória do conjunto de dados armazenado no Google Cloud Storage (GCS).

O fluxo de trabalho inclui as seguintes etapas:

1. Baixar os dados do GCS.
2. Verificar as informações básicas do conjunto de dados.
3. Verificar a consistência dos dados, incluindo valores ausentes, nulos, não numéricos e duplicados.
4. Analisar estatísticas básicas agrupadas por dia, mês e ano.
5. Verificar a consistência das datas.
6. Visualizar a distribuição dos meses e anos.
7. Visualizar as temperaturas mínimas, médias e máximas.
8. Visualizar o heatmap das temperaturas mensais por ano.
9. Visualizar gráficos de linha das temperaturas por ano.

Ferramentas e bibliotecas utilizadas:
- Apache Airflow para orquestração do fluxo de trabalho.
- Google Cloud Storage para armazenamento de dados.
- Pandas para manipulação e análise de dados.
- Matplotlib e Seaborn para visualização de dados.

Configurações:
- A DAG é configurada para ser executada no Cloud Composer.
- Os dados são carregados a partir de um bucket específico no GCS.
"""

# Definindo a DAG
default_args = {
    'owner': 'airflow',
    'start_date': days_ago(1),
}

with DAG(
    dag_id='analise_exploratoria_dados',
    default_args=default_args,
    schedule_interval=None,
) as dag:

    carregar_dados = PythonOperator(
        task_id='carregar_dados_do_gcs',
        python_callable=carregar_dados_do_gcs,
        op_kwargs={'bucket_name': 'seu-bucket', 'file_name': 'seu-arquivo.csv'}
    )

    verificar_info = PythonOperator(
        task_id='verificar_informacoes',
        python_callable=verificar_informacoes,
    )

    verificar_consist = PythonOperator(
        task_id='verificar_consistencia',
        python_callable=verificar_consistencia,
    )

    analisar_estat = PythonOperator(
        task_id='analisar_estatisticas',
        python_callable=analisar_estatisticas,
    )

    verificar_data = PythonOperator(
        task_id='verificar_datas',
        python_callable=verificar_datas,
    )

    visualizar_dist = PythonOperator(
        task_id='visualizar_distribuicao',
        python_callable=visualizar_distribuicao,
    )

    visualizar_temp = PythonOperator(
        task_id='visualizar_temperaturas',
        python_callable=visualizar_temperaturas,
    )

    visualizar_heatmap = PythonOperator(
        task_id='visualizar_heatmap_mensal',
        python_callable=visualizar_heatmap_mensal,
    )

    visualizar_linhas = PythonOperator(
        task_id='visualizar_graficos_linha',
        python_callable=visualizar_graficos_linha,
    )

    # Definindo as dependências das tarefas
    carregar_dados >> verificar_info >> verificar_consist >> analisar_estat >> verificar_data
    verificar_data >> visualizar_dist >> visualizar_temp >> visualizar_heatmap >> visualizar_linhas